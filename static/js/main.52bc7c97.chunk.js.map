{"version":3,"sources":["images/image0.png","images/image1.png","images/image2.png","images/image3.png","images/image4.png","images/image5.png","images/image6.png","images/image7.png","images/image8.png","images/image9.png","data.js","App.js","useMedia.jsx","useMeasure.jsx","serviceWorker.js","index.js"],"names":["module","exports","img0","img1","App","columns","queries","values","defaultValue","match","findIndex","q","matchMedia","matches","useState","value","set","useEffect","handler","window","addEventListener","removeEventListener","useMedia","ref","useRef","left","top","width","height","bounds","ResizeObserver","entry","contentRect","ro","observe","current","disconnect","useMeasure","bind","items","a","axios","get","edges","data","graphql","user","edge_owner_to_timeline_media","console","log","images","edge","push","css","node","display_url","dimensions","code","shortcode","setInterval","shuffle","heights","Array","fill","gridItems","map","child","i","column","indexOf","Math","min","xy","transitions","useTransition","item","from","opacity","enter","update","leave","config","mass","tension","friction","trail","class","style","max","props","rest","key","div","transform","interpolate","x","y","onClick","open","backgroundImage","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52bc7c97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image0.283a0224.png\";","module.exports = __webpack_public_path__ + \"static/media/image1.c975ca7d.png\";","module.exports = __webpack_public_path__ + \"static/media/image2.1718974c.png\";","module.exports = __webpack_public_path__ + \"static/media/image3.291bd6a6.png\";","module.exports = __webpack_public_path__ + \"static/media/image4.2a490ee7.png\";","module.exports = __webpack_public_path__ + \"static/media/image5.c28954f5.png\";","module.exports = __webpack_public_path__ + \"static/media/image6.8defa185.png\";","module.exports = __webpack_public_path__ + \"static/media/image7.9856ec8d.png\";","module.exports = __webpack_public_path__ + \"static/media/image8.d980507b.png\";","module.exports = __webpack_public_path__ + \"static/media/image9.208734f0.png\";","import axios from 'axios';\nimport img0 from './images/image0.png'\nimport img1 from './images/image1.png'\nimport img2 from './images/image2.png'\nimport img3 from './images/image3.png'\nimport img4 from './images/image4.png'\nimport img5 from './images/image5.png'\nimport img6 from './images/image6.png'\nimport img7 from './images/image7.png'\nimport img8 from './images/image8.png'\nimport img9 from './images/image9.png'\n\n\nexport default [\n    {\n        css:\n            `url(${img0})`,\n        height: 600\n    },\n    {\n        css:\n            `url(${img1})`,\n        height: 400\n    },\n\n]\n","import React, { useState, useEffect } from 'react'\nimport { useTransition, a } from 'react-spring'\nimport shuffle from 'lodash/shuffle'\nimport useMeasure from './useMeasure'\nimport useMedia from './useMedia'\nimport data from './data'\nimport axios from 'axios';\n\nimport './App.css'\nfunction App() {\n  const columns = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [5, 4, 3], 2)\n  // Hook2: Measure the width of the container element\n  const [bind, { width }] = useMeasure()\n  // Hook3: Hold items\n  const [items, set] = useState([])\n  useEffect(() => {\n    (async () => {\n\n      const edges = (await axios.get(`https://www.instagram.com/aniruddh.gs/?__a=1`)).data.graphql.user.edge_owner_to_timeline_media.edges\n      console.log(edges)\n      let images = [];\n\n\n      for (let edge of edges) {\n        images.push({ css: `url(${edge.node.display_url})`, ...edge.node.dimensions, code: edge.node.shortcode })\n      }\n      set(images)\n\n    })()\n  }, [])\n  // Hook4: shuffle data every 2 seconds\n  useEffect(() => void setInterval(() => set(shuffle), 10000), [])\n  // Form a grid of stacked items using width & columns we got from hooks 1 & 2\n  let heights = new Array(columns).fill(0) // Each column gets a height starting with zero\n  let gridItems = items.map((child, i) => {\n    const column = heights.indexOf(Math.min(...heights)) // Basic masonry-grid placing, puts tile into the smallest column using Math.min\n    const xy = [(width / columns) * column, (heights[column] += child.height / 2) - child.height / 2] // X = container width / number of columns * column index, Y = it's just the height of the current column\n    return { ...child, xy, width: width / columns, height: child.height / 2 }\n  })\n  // Hook5: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n  const transitions = useTransition(gridItems, item => item.css, {\n    from: ({ xy, width, height }) => ({ xy, width, height, opacity: 0 }),\n    enter: ({ xy, width, height }) => ({ xy, width, height, opacity: 1 }),\n    update: ({ xy, width, height }) => ({ xy, width, height }),\n    leave: { height: 0, opacity: 0 },\n    config: { mass: 5, tension: 500, friction: 100 },\n    trail: 25\n  })\n  // Render the grid\n  return (\n    <div {...bind} class=\"list\" style={{ height: Math.max(...heights) }}>\n      {transitions.map(({ item, props: { xy, ...rest }, key }) => (\n        <a.div key={key} style={{ transform: xy.interpolate((x, y) => `translate3d(${x}px,${y}px,0)`), ...rest }}>\n          <div onClick={() => window.open(`https://www.instagram.com/p/${item.code}/`)} style={{ backgroundImage: item.css }} />\n        </a.div>\n      ))}\n    </div>\n  )\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport default function useMedia(queries, values, defaultValue) {\n  const match = () =>\n    values[queries.findIndex((q) => matchMedia(q).matches)] || defaultValue;\n  const [value, set] = useState(match);\n  useEffect(() => {\n    const handler = () => set(match);\n    window.addEventListener(\"resize\", handler);\n    return () => window.removeEventListener(handler);\n  }, []);\n  return value;\n}\n","import { useRef, useState, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nexport default function useMeasure() {\n  const ref = useRef();\n  const [bounds, set] = useState({ left: 0, top: 0, width: 0, height: 0 });\n  const [ro] = useState(\n    () => new ResizeObserver(([entry]) => set(entry.contentRect))\n  );\n  useEffect(() => (ro.observe(ref.current), ro.disconnect), []);\n  return [{ ref }, bounds];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}